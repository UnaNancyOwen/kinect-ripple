//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RippleFloorApp.RFIDCardService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RFIDCardService.ISQLService")]
    public interface ISQLService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/PublishSessionGroup", ReplyAction="http://tempuri.org/ISQLService/PublishSessionGroupResponse")]
        string PublishSessionGroup(string inputEventsDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/PublishSessionGroup", ReplyAction="http://tempuri.org/ISQLService/PublishSessionGroupResponse")]
        System.Threading.Tasks.Task<string> PublishSessionGroupAsync(string inputEventsDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/PublishGroupWithEventsID", ReplyAction="http://tempuri.org/ISQLService/PublishGroupWithEventsIDResponse")]
        string PublishGroupWithEventsID(string dbName, string path, string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/PublishGroupWithEventsID", ReplyAction="http://tempuri.org/ISQLService/PublishGroupWithEventsIDResponse")]
        System.Threading.Tasks.Task<string> PublishGroupWithEventsIDAsync(string dbName, string path, string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/NonProd", ReplyAction="http://tempuri.org/ISQLService/NonProdResponse")]
        string NonProd(string dbName, string path, string EventID, string appDest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/NonProd", ReplyAction="http://tempuri.org/ISQLService/NonProdResponse")]
        System.Threading.Tasks.Task<string> NonProdAsync(string dbName, string path, string EventID, string appDest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/CreateEvents", ReplyAction="http://tempuri.org/ISQLService/CreateEventsResponse")]
        string CreateEvents(string inputEventsDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/CreateEvents", ReplyAction="http://tempuri.org/ISQLService/CreateEventsResponse")]
        System.Threading.Tasks.Task<string> CreateEventsAsync(string inputEventsDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/CreateEvent", ReplyAction="http://tempuri.org/ISQLService/CreateEventResponse")]
        RippleFloorApp.RFIDCardService.CreateEventResponse CreateEvent(RippleFloorApp.RFIDCardService.CreateEventRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/CreateEvent", ReplyAction="http://tempuri.org/ISQLService/CreateEventResponse")]
        System.Threading.Tasks.Task<RippleFloorApp.RFIDCardService.CreateEventResponse> CreateEventAsync(RippleFloorApp.RFIDCardService.CreateEventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/UpdateEvents", ReplyAction="http://tempuri.org/ISQLService/UpdateEventsResponse")]
        string UpdateEvents(string inputEventsDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/UpdateEvents", ReplyAction="http://tempuri.org/ISQLService/UpdateEventsResponse")]
        System.Threading.Tasks.Task<string> UpdateEventsAsync(string inputEventsDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/UpdateEvent", ReplyAction="http://tempuri.org/ISQLService/UpdateEventResponse")]
        string UpdateEvent(string AdminAlias, int EventID, System.Data.DataTable EventData, System.Data.DataTable TimingData, System.Data.DataTable CommunicationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/UpdateEvent", ReplyAction="http://tempuri.org/ISQLService/UpdateEventResponse")]
        System.Threading.Tasks.Task<string> UpdateEventAsync(string AdminAlias, int EventID, System.Data.DataTable EventData, System.Data.DataTable TimingData, System.Data.DataTable CommunicationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/UpdateAttendanceData", ReplyAction="http://tempuri.org/ISQLService/UpdateAttendanceDataResponse")]
        string UpdateAttendanceData(System.Data.DataTable AttendanceData, System.Data.DataTable UnknownUsersDataDT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/UpdateAttendanceData", ReplyAction="http://tempuri.org/ISQLService/UpdateAttendanceDataResponse")]
        System.Threading.Tasks.Task<string> UpdateAttendanceDataAsync(System.Data.DataTable AttendanceData, System.Data.DataTable UnknownUsersDataDT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/EventTrackerAttendanceReport", ReplyAction="http://tempuri.org/ISQLService/EventTrackerAttendanceReportResponse")]
        RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportResponse EventTrackerAttendanceReport(RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/EventTrackerAttendanceReport", ReplyAction="http://tempuri.org/ISQLService/EventTrackerAttendanceReportResponse")]
        System.Threading.Tasks.Task<RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportResponse> EventTrackerAttendanceReportAsync(RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/GetUserData", ReplyAction="http://tempuri.org/ISQLService/GetUserDataResponse")]
        RippleFloorApp.RFIDCardService.GetUserDataResponse GetUserData(RippleFloorApp.RFIDCardService.GetUserDataRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/GetUserData", ReplyAction="http://tempuri.org/ISQLService/GetUserDataResponse")]
        System.Threading.Tasks.Task<RippleFloorApp.RFIDCardService.GetUserDataResponse> GetUserDataAsync(RippleFloorApp.RFIDCardService.GetUserDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/CardScanIDRetrieval", ReplyAction="http://tempuri.org/ISQLService/CardScanIDRetrievalResponse")]
        RippleFloorApp.RFIDCardService.CardScanIDRetrievalResponse CardScanIDRetrieval(RippleFloorApp.RFIDCardService.CardScanIDRetrievalRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLService/CardScanIDRetrieval", ReplyAction="http://tempuri.org/ISQLService/CardScanIDRetrievalResponse")]
        System.Threading.Tasks.Task<RippleFloorApp.RFIDCardService.CardScanIDRetrievalResponse> CardScanIDRetrievalAsync(RippleFloorApp.RFIDCardService.CardScanIDRetrievalRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateEvent", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateEventRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable EventDT;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataTable TimingDT;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.Data.DataTable CommunicationDT;
        
        public CreateEventRequest() {
        }
        
        public CreateEventRequest(System.Data.DataTable EventDT, System.Data.DataTable TimingDT, System.Data.DataTable CommunicationDT) {
            this.EventDT = EventDT;
            this.TimingDT = TimingDT;
            this.CommunicationDT = CommunicationDT;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateEventResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateEventResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string CreateEventResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int EventID;
        
        public CreateEventResponse() {
        }
        
        public CreateEventResponse(string CreateEventResult, int EventID) {
            this.CreateEventResult = CreateEventResult;
            this.EventID = EventID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EventTrackerAttendanceReport", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class EventTrackerAttendanceReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string inputEventsDataFile;
        
        public EventTrackerAttendanceReportRequest() {
        }
        
        public EventTrackerAttendanceReportRequest(string inputEventsDataFile) {
            this.inputEventsDataFile = inputEventsDataFile;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EventTrackerAttendanceReportResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class EventTrackerAttendanceReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string EventTrackerAttendanceReportResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataTable attendeesDT;
        
        public EventTrackerAttendanceReportResponse() {
        }
        
        public EventTrackerAttendanceReportResponse(string EventTrackerAttendanceReportResult, System.Data.DataTable attendeesDT) {
            this.EventTrackerAttendanceReportResult = EventTrackerAttendanceReportResult;
            this.attendeesDT = attendeesDT;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserData", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int cardkey;
        
        public GetUserDataRequest() {
        }
        
        public GetUserDataRequest(int cardkey) {
            this.cardkey = cardkey;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserDataResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string GetUserDataResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataTable userDT;
        
        public GetUserDataResponse() {
        }
        
        public GetUserDataResponse(string GetUserDataResult, System.Data.DataTable userDT) {
            this.GetUserDataResult = GetUserDataResult;
            this.userDT = userDT;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CardScanIDRetrieval", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CardScanIDRetrievalRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int cardkey;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string FirmwareVersion;
        
        public CardScanIDRetrievalRequest() {
        }
        
        public CardScanIDRetrievalRequest(int cardkey, string FirmwareVersion) {
            this.cardkey = cardkey;
            this.FirmwareVersion = FirmwareVersion;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CardScanIDRetrievalResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CardScanIDRetrievalResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string CardScanIDRetrievalResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Data.DataTable userDT;
        
        public CardScanIDRetrievalResponse() {
        }
        
        public CardScanIDRetrievalResponse(string CardScanIDRetrievalResult, System.Data.DataTable userDT) {
            this.CardScanIDRetrievalResult = CardScanIDRetrievalResult;
            this.userDT = userDT;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISQLServiceChannel : RippleFloorApp.RFIDCardService.ISQLService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SQLServiceClient : System.ServiceModel.ClientBase<RippleFloorApp.RFIDCardService.ISQLService>, RippleFloorApp.RFIDCardService.ISQLService {
        
        public SQLServiceClient() {
        }
        
        public SQLServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SQLServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SQLServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SQLServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string PublishSessionGroup(string inputEventsDataFile) {
            return base.Channel.PublishSessionGroup(inputEventsDataFile);
        }
        
        public System.Threading.Tasks.Task<string> PublishSessionGroupAsync(string inputEventsDataFile) {
            return base.Channel.PublishSessionGroupAsync(inputEventsDataFile);
        }
        
        public string PublishGroupWithEventsID(string dbName, string path, string EventID) {
            return base.Channel.PublishGroupWithEventsID(dbName, path, EventID);
        }
        
        public System.Threading.Tasks.Task<string> PublishGroupWithEventsIDAsync(string dbName, string path, string EventID) {
            return base.Channel.PublishGroupWithEventsIDAsync(dbName, path, EventID);
        }
        
        public string NonProd(string dbName, string path, string EventID, string appDest) {
            return base.Channel.NonProd(dbName, path, EventID, appDest);
        }
        
        public System.Threading.Tasks.Task<string> NonProdAsync(string dbName, string path, string EventID, string appDest) {
            return base.Channel.NonProdAsync(dbName, path, EventID, appDest);
        }
        
        public string CreateEvents(string inputEventsDataFile) {
            return base.Channel.CreateEvents(inputEventsDataFile);
        }
        
        public System.Threading.Tasks.Task<string> CreateEventsAsync(string inputEventsDataFile) {
            return base.Channel.CreateEventsAsync(inputEventsDataFile);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RippleFloorApp.RFIDCardService.CreateEventResponse RippleFloorApp.RFIDCardService.ISQLService.CreateEvent(RippleFloorApp.RFIDCardService.CreateEventRequest request) {
            return base.Channel.CreateEvent(request);
        }
        
        public string CreateEvent(System.Data.DataTable EventDT, System.Data.DataTable TimingDT, System.Data.DataTable CommunicationDT, out int EventID) {
            RippleFloorApp.RFIDCardService.CreateEventRequest inValue = new RippleFloorApp.RFIDCardService.CreateEventRequest();
            inValue.EventDT = EventDT;
            inValue.TimingDT = TimingDT;
            inValue.CommunicationDT = CommunicationDT;
            RippleFloorApp.RFIDCardService.CreateEventResponse retVal = ((RippleFloorApp.RFIDCardService.ISQLService)(this)).CreateEvent(inValue);
            EventID = retVal.EventID;
            return retVal.CreateEventResult;
        }
        
        public System.Threading.Tasks.Task<RippleFloorApp.RFIDCardService.CreateEventResponse> CreateEventAsync(RippleFloorApp.RFIDCardService.CreateEventRequest request) {
            return base.Channel.CreateEventAsync(request);
        }
        
        public string UpdateEvents(string inputEventsDataFile) {
            return base.Channel.UpdateEvents(inputEventsDataFile);
        }
        
        public System.Threading.Tasks.Task<string> UpdateEventsAsync(string inputEventsDataFile) {
            return base.Channel.UpdateEventsAsync(inputEventsDataFile);
        }
        
        public string UpdateEvent(string AdminAlias, int EventID, System.Data.DataTable EventData, System.Data.DataTable TimingData, System.Data.DataTable CommunicationData) {
            return base.Channel.UpdateEvent(AdminAlias, EventID, EventData, TimingData, CommunicationData);
        }
        
        public System.Threading.Tasks.Task<string> UpdateEventAsync(string AdminAlias, int EventID, System.Data.DataTable EventData, System.Data.DataTable TimingData, System.Data.DataTable CommunicationData) {
            return base.Channel.UpdateEventAsync(AdminAlias, EventID, EventData, TimingData, CommunicationData);
        }
        
        public string UpdateAttendanceData(System.Data.DataTable AttendanceData, System.Data.DataTable UnknownUsersDataDT) {
            return base.Channel.UpdateAttendanceData(AttendanceData, UnknownUsersDataDT);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAttendanceDataAsync(System.Data.DataTable AttendanceData, System.Data.DataTable UnknownUsersDataDT) {
            return base.Channel.UpdateAttendanceDataAsync(AttendanceData, UnknownUsersDataDT);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportResponse RippleFloorApp.RFIDCardService.ISQLService.EventTrackerAttendanceReport(RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportRequest request) {
            return base.Channel.EventTrackerAttendanceReport(request);
        }
        
        public string EventTrackerAttendanceReport(string inputEventsDataFile, out System.Data.DataTable attendeesDT) {
            RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportRequest inValue = new RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportRequest();
            inValue.inputEventsDataFile = inputEventsDataFile;
            RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportResponse retVal = ((RippleFloorApp.RFIDCardService.ISQLService)(this)).EventTrackerAttendanceReport(inValue);
            attendeesDT = retVal.attendeesDT;
            return retVal.EventTrackerAttendanceReportResult;
        }
        
        public System.Threading.Tasks.Task<RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportResponse> EventTrackerAttendanceReportAsync(RippleFloorApp.RFIDCardService.EventTrackerAttendanceReportRequest request) {
            return base.Channel.EventTrackerAttendanceReportAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RippleFloorApp.RFIDCardService.GetUserDataResponse RippleFloorApp.RFIDCardService.ISQLService.GetUserData(RippleFloorApp.RFIDCardService.GetUserDataRequest request) {
            return base.Channel.GetUserData(request);
        }
        
        public string GetUserData(int cardkey, out System.Data.DataTable userDT) {
            RippleFloorApp.RFIDCardService.GetUserDataRequest inValue = new RippleFloorApp.RFIDCardService.GetUserDataRequest();
            inValue.cardkey = cardkey;
            RippleFloorApp.RFIDCardService.GetUserDataResponse retVal = ((RippleFloorApp.RFIDCardService.ISQLService)(this)).GetUserData(inValue);
            userDT = retVal.userDT;
            return retVal.GetUserDataResult;
        }
        
        public System.Threading.Tasks.Task<RippleFloorApp.RFIDCardService.GetUserDataResponse> GetUserDataAsync(RippleFloorApp.RFIDCardService.GetUserDataRequest request) {
            return base.Channel.GetUserDataAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RippleFloorApp.RFIDCardService.CardScanIDRetrievalResponse RippleFloorApp.RFIDCardService.ISQLService.CardScanIDRetrieval(RippleFloorApp.RFIDCardService.CardScanIDRetrievalRequest request) {
            return base.Channel.CardScanIDRetrieval(request);
        }
        
        public string CardScanIDRetrieval(int cardkey, string FirmwareVersion, out System.Data.DataTable userDT) {
            RippleFloorApp.RFIDCardService.CardScanIDRetrievalRequest inValue = new RippleFloorApp.RFIDCardService.CardScanIDRetrievalRequest();
            inValue.cardkey = cardkey;
            inValue.FirmwareVersion = FirmwareVersion;
            RippleFloorApp.RFIDCardService.CardScanIDRetrievalResponse retVal = ((RippleFloorApp.RFIDCardService.ISQLService)(this)).CardScanIDRetrieval(inValue);
            userDT = retVal.userDT;
            return retVal.CardScanIDRetrievalResult;
        }
        
        public System.Threading.Tasks.Task<RippleFloorApp.RFIDCardService.CardScanIDRetrievalResponse> CardScanIDRetrievalAsync(RippleFloorApp.RFIDCardService.CardScanIDRetrievalRequest request) {
            return base.Channel.CardScanIDRetrievalAsync(request);
        }
    }
}
